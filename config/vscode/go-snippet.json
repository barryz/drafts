{
	"Err handle snippet": {
		"prefix": "ie",
		"body": [
			"if err != nil {",
			"\t$0",
			"}"
		],
		"description": "err handler"
	},
	"Method snippet": {
		"prefix": "fr",
		"body": [
			"// ${1:} ",
			"func (r *reciver) ${1:}() error {",
			"\t",
			"\treturn nil",
			"}"
		],
		"description": "create a method function"
	},
	"Func snippet": {
		"prefix": "fn",
		"body": [
			"// ${1:} ",
			"func ${1:}() error {",
			"\t",
			"\treturn nil",
			"}"
		],
		"description": "create a normal function"
	},
	"Json Unmarshal snippet": {
		"prefix": "ju",
		"body": [
			"if err := json.Unmarshal([]byte(), &t); err != nil {",
			"\t$0",
			"}"
		],
		"description": "json unmarshal"
	},
	"Json Marshal snippet": {
		"prefix": "jm",
		"body": [
			"bs, err := json.Marshal(payload)",
			"if err != nil {",
			"\t$0",
			"}"
		],
		"description": "json Marshal"
	},
	"Iterate Slice": {
		"prefix": "frs",
		"body": [
			"for _, ${1:v} := range slice {",
			"\t$0",
			"}"
		],
		"description": "iterate a slice"
	},
	"Iterate Map": {
		"prefix": "frm",
		"body": [
			"for ${1:k}, ${2:v} := range Map {",
			"\t$0",
			"}"
		],
		"description": "iterate a map"
	},
	"go func": {
		"prefix": "gf",
		"body": [
			"go func() {",
			"\t$0",
			"}()"
		],
		"description": "generate a goroutine func"
	},
	"type struct": {
		"prefix": "ts",
		"body": [
			"// ${0:}",
			"type ${0:} struct {",
			"\t",
			"}"
		],
		"description": "generate a struct define snippet"
	},
	"json tags": {
		"prefix": "jt",
		"body": [
			"`json:\"field\"`"
		],
		"description": "add a json tag"
	},
	"yaml tags": {
		"prefix": "yt",
		"body": [
			"`yaml:\"field\"`"
		],
		"description": "add a yaml tag"
	}
}
